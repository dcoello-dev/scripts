# blerc
bleopt complete_auto_complete=
bleopt char_width_mode=east
bleopt input_encoding=UTF-8

# Disable syntax highlighting
# bleopt highlight_syntax=

# Disable highlighting based on filenames
# bleopt highlight_filename=

# Disable highlighting based on variable types
# bleopt highlight_variable=

# Disable auto-complete (Note: auto-complete is enabled by default in bash-4.0+)
# bleopt complete_auto_complete=
# Tip: you may instead specify the delay of auto-complete in millisecond
# bleopt complete_auto_delay=300

# Disable auto-complete based on the command history
bleopt complete_auto_history=

# Disable ambiguous completion
bleopt complete_ambiguous=

# Disable menu-complete by TAB
# bleopt complete_menu_complete=

# Disable menu filtering (Note: auto-complete is enabled by default in bash-4.0+)
# bleopt complete_menu_filter=

# Disable EOF marker like "[ble: EOF]"
# bleopt prompt_eol_mark=''
# Tip: you may instead specify another string:
# bleopt prompt_eol_mark='⏎'

# Disable error exit marker like "[ble: exit %d]"
# bleopt exec_errexit_mark=
# Tip: you may instead specify another string:
# bleopt exec_errexit_mark=$'\e[91m[error %d]\e[m'
bleopt edit_abell=1


ble-face argument_option=fg=teal
ble-face auto_complete=fg=238,bg=254
# ble-face blerc_git_commit_id=fg=navy
ble-face cmdinfo_cd_cdpath=fg=26,bg=155
ble-face command_alias=fg=teal
ble-face command_builtin=fg=red
ble-face command_builtin_dot=fg=red,bold
ble-face command_directory=fg=200,bold
ble-face command_file=fg=191,bold
ble-face command_function=fg=92
ble-face command_jobs=fg=red,bold
ble-face command_keyword=fg=blue
ble-face disabled=fg=242
ble-face filename_block=fg=yellow,bg=black
ble-face filename_character=fg=white,bg=black
ble-face filename_directory=fg=200,bold
ble-face filename_directory_sticky=fg=white,bg=26
ble-face filename_executable=fg=191,bold
ble-face filename_link=fg=teal
ble-face filename_ls_colors=fg=cyan,bold
ble-face filename_orphan=fg=teal,bg=224
ble-face filename_other=fg=cyan,bold
ble-face filename_pipe=fg=lime,bg=black
ble-face filename_setgid=fg=black,bg=191
ble-face filename_setuid=fg=black,bg=220
ble-face filename_socket=fg=cyan,bg=black
ble-face filename_url=fg=blue
ble-face filename_warning=fg=red
# ble-face menu_filter_fixed=bold
# ble-face menu_filter_input=fg=16,bg=229
ble-face overwrite_mode=fg=black,bg=51
ble-face prompt_status_line=fg=231,bg=240
ble-face region=fg=white,bg=60
ble-face region_insert=fg=blue,bg=252
ble-face region_match=fg=white,bg=55
ble-face region_target=fg=black,bg=153
ble-face syntax_brace=fg=37,bold
ble-face syntax_command=fg=brown
ble-face syntax_comment=fg=242
ble-face syntax_default=none
ble-face syntax_delimiter=bold
ble-face syntax_document=fg=94
ble-face syntax_document_begin=fg=94,bold
ble-face syntax_error=fg=231,bg=203
ble-face syntax_escape=fg=magenta
ble-face syntax_expr=fg=26
ble-face syntax_function_name=fg=92,bold
ble-face syntax_glob=fg=198,bold
ble-face syntax_history_expansion=fg=231,bg=94
ble-face syntax_param_expansion=fg=purple
ble-face syntax_quotation=fg=green,bold
ble-face syntax_quoted=fg=green
ble-face syntax_tilde=fg=navy,bold
ble-face syntax_varname=fg=orange
ble-face varname_array=fg=orange,bold
ble-face varname_empty=fg=31
ble-face varname_export=fg=200,bold
ble-face varname_expr=fg=92,bold
ble-face varname_hash=fg=70,bold
ble-face varname_number=fg=64
ble-face varname_readonly=fg=200
ble-face varname_transform=fg=29,bold
ble-face varname_unset=fg=124
ble-face vbell=reverse
ble-face vbell_erase=bg=252
ble-face vbell_flash=fg=green,reverse

ble-bind -c 'C-x h' 'git log --oneline -n5'

function blerc/define-sabbrev-date {
  ble-sabbrev -m '\date'='ble/util/assign COMPREPLY "date +%F"'
}
blehook/eval-after-load complete blerc/define-sabbrev-date

function blerc/define-sabbrev-branch {
  function blerc/sabbrev-git-branch {
    ble/util/assign-array COMPREPLY "git branch | sed 's/^\*\{0,1\}[[:space:]]*//'" 2>/dev/null
  }
  ble-sabbrev -m '\branch'=blerc/sabbrev-git-branch
}
blehook/eval-after-load complete blerc/define-sabbrev-branch

function blerc/define-sabbrev-commit {
  ble/color/defface blerc_git_commit_id fg=navy
  ble/complete/action/inherit-from blerc_git_commit_id word
  function ble/complete/action:blerc_git_commit_id/init-menu-item {
    local ret
    ble/color/face2g blerc_git_commit_id; g=$ret
  }
  function blerc/sabbrev-git-commit {
    bleopt sabbrev_menu_style=desc-raw
    bleopt sabbrev_menu_opts=enter_menu

    local format=$'%h \e[1;32m(%ar)\e[m %s - \e[4m%an\e[m\e[1;33m%d\e[m'
    local arr; ble/util/assign-array arr 'git log --pretty=format:"$format"' &>/dev/null
    local line hash subject
    for line in "${arr[@]}"; do
      builtin read hash subject <<< "$line"
      ble/complete/cand/yield blerc_git_commit_id "$hash" "$subject"
    done
  }
  ble-sabbrev -m '\commit'='blerc/sabbrev-git-commit'
}
blehook/eval-after-load complete blerc/define-sabbrev-commit

# blerc

_blerc_prompt_git_vars=(git_base)

function blerc/prompt/git/initialize {
  type git &>/dev/null || return 1
  local path=$PWD
  while
    if [[ -f $path/.git/HEAD ]]; then
      git_base=$path
      return 0
    fi
    [[ $path == */* ]]
  do path=${path%/*}; done
  return 1
}
function blerc/prompt/git/get-head-information {
  branch= hash=

  local head_file=$git_base/.git/HEAD
  [[ -s $head_file ]] || return 1
  local content; ble/util/mapfile content < "$head_file"

  if [[ $content == *'ref: refs/heads/'* ]]; then
    branch=${content#*refs/heads/}

    local branch_file=$git_base/.git/refs/heads/$branch
    [[ -s $branch_file ]] || return 1
    local content; ble/util/mapfile content < "$branch_file"
  fi

  [[ ! ${content//[0-9a-fA-F]} ]] && hash=$content
  return 0
}
function blerc/prompt/git/get-tag-name {
  tag=
  local hash=$1; [[ $hash ]] || return 1

  local file tagsdir=$git_base/.git/refs/tags hash1
  local files ret; ble/util/eval-pathname-expansion '"$tagsdir"/*'; files=("${ret[@]}")
  for file in "${files[@]}"; do
    local tag1=${file#$tagsdir/}
    [[ -s $file ]] || continue
    ble/util/mapfile hash1 < "$file"
    if [[ $hash1 == "$hash" ]]; then
      tag=$tag1
      return 0
    fi
  done
}
function blerc/prompt/git/describe-head {
  ret=

  local hash branch
  blerc/prompt/git/get-head-information
  if [[ $branch ]]; then
    local sgr=$'\e[1;34m' sgr0=$'\e[m'
    ret=$sgr$branch$sgr0
    [[ $hash ]] && ret="$ret (${hash::7})"
    return 0
  fi

  local DETACHED=$'\e[91mDETACHED\e[m'

  local tag
  blerc/prompt/git/get-tag-name "$hash"
  if [[ $tag ]]; then
    local sgr=$'\e[1;32m' sgr0=$'\e[m'
    ret=$sgr$tag$sgr0
    [[ $hash ]] && ret="$ret ${hash::7}"
    ret="$DETACHED ($ret)"
    return 0
  fi

  if [[ $hash ]]; then
    ret="$DETACHED (${hash::7})"
    return 0
  fi

  ret=$'\e[91mUNKNOWN\e[m'
}

function ble/prompt/backslash:X {
  local "${_blerc_prompt_git_vars[@]/%/=}"
  if blerc/prompt/git/initialize; then
    local sgr=$'\e[1m' sgr0=$'\e[m'
    local name=$sgr${git_base##*?/}$sgr0
    local ret; blerc/prompt/git/describe-head; local branch=$ret
    ble/prompt/print "$name $branch"
    [[ $PWD == "$git_base"/?* ]] &&
      ble/prompt/print " /${PWD#$git_base/}"

  fi

  return 0
}
bleopt prompt_rps1='\X'
bleopt prompt_rps1_transient=1
